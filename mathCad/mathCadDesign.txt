typedef double (ARG2 *)(double, double)
typedef double (ARG1 *)(double)
typedef double (ARG0 *)()
typedef union
{
	ARG2 arg2
	ARG1 arg1
	ARG0 arg0
} OPFUNC


opSymb
public:
	static vector<opSymb *> valid
	static bool LoadOpSymb(char *fileName)
		fp = fopen(fileName, "r")
		for every line in the file
			fscanf(fp, "%s:%p:%i", string, funcP, i)
			valid.push_back(new opSymb(string, (i==0? (ARG0):(i==1? (ARG1):(ARG2)))funcP))
		fclose(fp)
		
private:
	OPFUNC opFunc
	String symb
	
public:
	opSymb(const String s, ARG1 *func): symb(s), opFunc(func)	{}
	opSymb(const String s, ARG2 *func): symb(s), opFunc(func)	{}
	bool operator== (String s)
		return symb == s
	


Operator

	double result
	Operator *lOperand
	Operator *rOperand
	char   *opLoc
	OPFUNC *opFunc
public:
	Operator()
	{
		lOperand = rOperand = NULL
		opLoc = NULL
		opFunc = NULL
		result = 0
	}
public:
	void setLeft(Operator *)
	void setRight(Operator *)
	bool setLoc(char *op)
		if *(opLoc = op) is num
			lOperand = rOperand = NULL
			opFunc = NULL
			copy valid characters including and following opLoc into str
			result = atof(str)
		else if result of search of valid op-symbols (opSymb::valid) isn't last
			opFunc = &(opSymb::valid[result]->opFunc)
		else
			return FAILURE (false)
		
		return SUCCESS (true)
	
	const Operator const *getLeft() const
	const Operator const *getRight() const 
	char const *getLoc() const
	
public:
	const double getResult()
		double left, right
		if lOperand != NULL
			left = lOperand->getResult()
			if rOperand != NULL
				right = rOperand->getResult()
				result = opFunc.arg2(left, right)
			else
				result = opFunc.arg1(left, right)
		return result
end

Expression
	char *raw					//raw string input from user
	string proc					//proc string input from user
	vector<Operator *>	conv	//first operator in tree structure of expression
	unordered_map<char, vector<double *>> variables
	/****************************************************************************************
	* database of all the variables used by this expression. 								*
	* one string to one undefined sized list of pointers to doubles (operator results)		*
	*****************************************************************************************/
	
private:
	void process()
		convert any sequence of !('+'), '-', (number, variable, ('(')); to ('+'), '-', (number, variable, ('(')).
		//subtraction is the same as adding the opposite
		convert any sequence of ('-'), !(number); to ('-1*'), !(number)
		//opposite of an enclosed term is the same as -1 times the term
		place parentheses around whole thing
		
	void convert()
		for(i = 0; i < proc.size(); i++)
			if(!Operator::isValid(proc[i]).empty())
				conv.push_back(new Operator(proc[i], NULL, NULL))
				if (*conv.end())->getOpType() == VAR
					variables[*((*conv.end())->getLoc())] = (*conv.end())->getVariable()
	
	convIterator getOperand(convIterator init, unsigned short flags)
		bool right = flags & RIGHT
		bool skip = flags & SKIP
		bool high = *((*init)->getLoc()) == (right? '(':')')
		convIterator i, best
		for (i = init + (right? 1:-1); *((*i)->getLoc())!=(right? ')':'('); right? ++i:--i)
			if(!skip)
				if (*i)->getFunc()->getPriority() <= (high? 0:((*init)->getFunc()->getPriority())) && 
				(*i)->getFunc()->getPriority() > (best == NULL? 0:(*best)->getFunc()->getPriority())
					best = i
				if (*i)->getFunc()->getPriority() >= (high? 0:((*init)->getFunc()->getPriority()))
					break;
				if *((*i)->getLoc()) == (right? '(':')')
					i = getOperand(i, (flags & RIGHT) | SKIP)
				
		return (skip? i:best)
		
		Expression(char *s): raw(s)
			process()
			convert()
			for(iterator i = conv.begin(); i!=conv.end(); i++)
				(*i)->setLeftOp(getOperand(i, 0))
				(*i)->setRightOp(getOperand(i, RIGHT))